#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import eventlet
eventlet.monkey_patch()

import gettext
import optparse
import os
import sys

gettext.install('reddwarf', unicode=1)

# If ../reddwarf/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
    os.pardir,
    os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'reddwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from reddwarf import version
from reddwarf.common import config
from reddwarf.common import service
# TODO(hub-cap): find out why the db api isnt being imported properly
from reddwarf.db import db_api


if __name__ == '__main__':
    parser = optparse.OptionParser(version="%%prog %s"
        % version.version_string())
    config.add_common_options(parser)
    config.add_log_options(parser)

    (options, args) = config.parse_options(parser)
    try:
        conf, app = config.Config.load_paste_app('reddwarf-decepticon',
                                                 options, args)
        db_api.configure_db(conf)
        periodic_runs = int(conf.get("periodic_runs", 60))
        server = service.Service.create(binary='reddwarf-decepticon',
                                        periodic_interval=periodic_runs)
        service.serve(server)
        service.wait()
    except RuntimeError as error:
        import traceback
        print traceback.format_exc()
        sys.exit("ERROR: %s" % error)

